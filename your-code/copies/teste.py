# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14qUNriR6MddLhlyQngegj7sZAYcdMTgL
"""

user_data = {
    "name": "",
    "user_gender": "",
}

bathroom_m = {
    "name": "bathroom m",
    "type": "furniture",
    "permission": "M"
}

bathroom_f = {
    "name": "bahtroom m",
    "type": "furniture",
    "permission": "F"
}

catarina = {
    "name": "catarina",
    "type": "human",
    "message": "Welcome to IronHack. I'm Catarina and will do my best to get your dream-job. You can now move to the "
               "next room "
}

door_a = {
    "name": "door a",
    "type": "door",
    "permission": True
}

door_b = {
    "name": "door b",
    "type": "door",
    "permission": False
}


key_1 = {
    "name": "careerhack",
    "type": "key",
    "target": door_a
}

presentation_room = {
    "name": "presentation room",
    "type": "room",
}

outside = {
  "name": "outside"
}

object_relations = {
    "bathroom m": [user_data],
    "bathroom f": [user_data],
    "presentation room": [door_a, catarina, door_b], # door_a e door b não ficam aqui
    "outside": [door_a],
    "catarina": [key_1],
    "door a": [presentation_room, outside],
    "door b": [presentation_room],
}

all_rooms = [presentation_room, outside]

all_doors = [door_a, door_b]

INIT_GAME_STATE = {
    "current_room": presentation_room,
    "keys_collected": [],
    "target_room": outside
}

def linebreak():
    """
    Print a line break
    """
    print("\n\n")

def user():
    user_data["name"] = input("Hi! Welcome to our little IronHack-game. Please, give us your name: ")
    user_data["user_gender"] = input("We're sorry, but our bathrooms have a binary system, what is your gender? 'M or 'F: ")

def check_permission_bathroom_m():
  return user_data["user_gender"] == "M"

def check_permission_bathroom_f():
  return user_data["user_gender"] == "F"

# def human_interaction(human):
#    # função que retorna a mensagem do objeto de tipo human
#    message_found = human["message"]
#    return message_found

def explore_room(room):
    """
    Explore a room. List all items belonging to this room.
    """
    items = [i["name"] for i in object_relations[room["name"]]]
    print("You explore the room. This is " + room["name"] + ". You find " + ", ".join(items))

def get_next_room_of_door(door, current_room):
    """
    From object_relations, find the two rooms connected to the given door.
    Return the room that is not the current_room.
    """
    connected_rooms = object_relations[door["name"]]
    for room in connected_rooms:
        if (not current_room == room):
            return room

def start_game():
    """
    Start the game and calls for the user data
    """
    user()
    print("You wake up on a couch and find yourself in a strange house with no windows which you have never been to before. You don't remember why you are here and what had happened before. You feel some unknown danger is approaching and you must get out of the house, NOW!")
    play_room(game_state["current_room"])

def examine_item(item_name):
    current_room = game_state["current_room"]
    next_room = ""
    output = ''
    
    for item in object_relations[current_room["name"]]:
        if (item["name"] == item_name):
            output = "You examine " + item_name + ". "
            if (item["type"] == "door"):
                have_key = False
                for key in game_state["keys_collected"]:
                    if(key["target"] == item):
                        have_key = True
                if(have_key):
                    output += "You unlock it with a key you have."
                    next_room = get_next_room_of_door(item, current_room)
                else:
                    output += "It is locked but you don't have the key."
            else:
                if ((item["name"] in object_relations and len(object_relations[item["name"]])>0)) and (item["type"] == "furniture"):
                    item_found = object_relations[item["name"]].pop()
                    game_state["keys_collected"].append(item_found)
                    output += "You find " + item_found["name"] + "."
                else:
                    item_found = object_relations[item["name"]].pop()
                    game_state["keys_collected"].append(item_found)
                    output = " Catarina says: " + item["message"] + ". "

        else:
            output += "There isn't anything interesting about it."
            print(output)
            continue

    if(output is None):
        print("The item you requested is not found in the current room.")
    
    if(next_room and input("Do you want to go to the next room? Ener 'yes' or 'no'").strip() == 'yes'):
        play_room(next_room)
    else:
        play_room(current_room)

def play_room(room):
    """
    Play a room. First check if the room being played is the target room.
    If it is, the game will end with success. Otherwise, let player either 
    explore (list all items in this room) or examine an item found here.
    """
    game_state["current_room"] = room
    if(game_state["current_room"] == game_state["target_room"]):
        print("Congrats! You escaped the room!")
    else:
        print("You are now in " + room["name"])
        intended_action = input("What would you like to do? Type 'explore' or 'examine'?").strip()
        if intended_action == "explore":
            explore_room(room)
            play_room(room)
        elif intended_action == "examine":
            examine_item(input("What would you like to examine?").strip())
        else:
            print("Not sure what you mean. Type 'explore' or 'examine'.")
            play_room(room)
        linebreak()



game_state = INIT_GAME_STATE.copy()
start_game()

balbal = ''

